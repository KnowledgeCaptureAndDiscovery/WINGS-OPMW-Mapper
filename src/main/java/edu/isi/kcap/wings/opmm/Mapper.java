package edu.isi.kcap.wings.opmm;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.HashMap;

import edu.isi.kcap.wings.opmm.DataTypes.Links;

/**
 *
 * @author Daniel Garijo
 */
public class Mapper {
    private static final String EXECUTION = "execution";
    private static final String EXPANDED_TEMPLATE = "expandedTemplate";
    private static final String ABSTRACT_TEMPLATE = "abstractTemplate";

    /**
     * Most of these will be reused from the old code, because it works.
     * The mapper initializes the catalog and calls to the template exporter.
     *
     * @param domain
     * @param filePublisher
     * @param abstractFilePath
     * @param exportPrefix:                        Used to generate the URIs of the
     *                                             exported
     *                                             files
     * @param exportUrl:                           ??
     * @param catalogRepository:                   The directory where the catalog
     *                                             will be
     *                                             stored
     * @param componentLibraryFilePath:            The path to the component library
     *                                             file
     * @param planFilePath:                        The path to the Workflow plan
     *                                             file
     * @param endpointQueryURI:                    The URI of the endpoint where the
     *                                             queries will be sent
     * @param endpointPostURI:                     The URI of the endpoint where the
     *                                             triples will be sent
     * @param executionDestinationFilePath:        The path to the execution file
     *                                             that will be generated by the
     *                                             mapper
     * @param expandedTemplateDestinationFilePath: The path to the expanded template
     *                                             file that will be generated by
     *                                             the mapper
     * @param serialization:                       The serialization of the files
     *                                             that will be generated by the
     *                                             mapper
     * @param filePublisher:                       The file publisher that will be
     *                                             used to publish the files
     * @return
     * @throws IOException
     */
    public static HashMap<String, Links> main(String domain, String exportPrefix, String exportUrl,
            String catalogRepository,
            String componentLibraryFilePath, String planFilePath, String endpointQueryURI, String endpointPostURI,
            String executionDestinationFilePath, String expandedTemplateDestinationFilePath, String abstractFilePath,
            FilePublisher filePublisher, String serialization)
            throws IOException {
        // Response
        HashMap<String, Links> response = new HashMap<String, Links>();
        // Create the catalog
        Catalog catalog = new Catalog(domain, exportPrefix,
                catalogRepository, componentLibraryFilePath);
        WorkflowExecutionExport executionExport = new WorkflowExecutionExport(planFilePath, catalog, exportUrl,
                exportPrefix,
                endpointQueryURI, domain,
                filePublisher);

        exportCatalog(catalogRepository, serialization, response, catalog);
        exportExecution(executionDestinationFilePath, serialization, response, executionExport);
        if (!executionExport.isExecPublished()) {
            exportExpandedTemplate(expandedTemplateDestinationFilePath, serialization, response, executionExport);
            exportAbstractTemplate(abstractFilePath, serialization, response, executionExport);
        }
        return response;
    }

    private static void exportCatalog(String catalogRepository, String serialization, HashMap<String, Links> response,
            Catalog catalog) throws IOException {
        // Export the catalog
        String domainPath = catalog.exportCatalog(catalogRepository, serialization);
        // this.publishFile(tstoreurl, catalog.getDomainGraphURI(),
        // new File(domainPath).getAbsolutePath());
        response.put("catalog", new Links() {
            {
                path = domainPath;
                url = catalog.getDomainGraphURI();
            }
        });
    }

    private static void exportExpandedTemplate(String expandedTemplateDestinationFilePath, String serialization,
            HashMap<String, Links> response, WorkflowExecutionExport executionExport) throws IOException {
        String expandedTemplateGraphUri = executionExport.getConcreteTemplateExport().exportAsOPMW(
                expandedTemplateDestinationFilePath,
                serialization);
        // TODO: enable publishing of expanded template
        // if (!executionExport.getConcreteTemplateExport().isTemplatePublished()){
        // this.publishFile(endpointPostURI, expandedTemplateGraphUri,
        // expandedTemplateFilePath);
        // }
        response.put(EXPANDED_TEMPLATE, new Links() {
            {
                path = expandedTemplateDestinationFilePath;
                url = expandedTemplateGraphUri;
            }
        });
    }

    private static void exportExecution(String executionDestinationFilePath, String serialization,
            HashMap<String, Links> response, WorkflowExecutionExport executionExport)
            throws IOException, FileNotFoundException {
        String executionGraphUri = executionExport.exportAsOPMW(executionDestinationFilePath, serialization);
        // this.publishFile(endpointPostURI, graphUri, executionFilePath);
        response.put(EXECUTION, new Links() {
            {
                path = executionGraphUri;
                url = executionDestinationFilePath;
            }
        });
    }

    private static void exportAbstractTemplate(String abstractFilePath, String serialization,
            HashMap<String, Links> response,
            WorkflowExecutionExport executionExport) throws IOException {
        WorkflowTemplateExport abstractTemplateExport = executionExport.getConcreteTemplateExport()
                .getAbstractTemplateExport();
        if (abstractTemplateExport != null) {
            String abstractGraphUri = abstractTemplateExport.exportAsOPMW(abstractFilePath, serialization);
            // if (!abstractTemplateExport.isTemplatePublished())
            // this.publishFile(tstoreurl, abstractGraphUri, abstractFilePath);
            response.put(ABSTRACT_TEMPLATE, new Links() {
                {
                    path = abstractFilePath;
                    url = abstractGraphUri;
                }
            });
        } else {
            response.put(ABSTRACT_TEMPLATE, new Links() {
                {
                    path = null;
                    url = null;
                }
            });
        }
    }

}
