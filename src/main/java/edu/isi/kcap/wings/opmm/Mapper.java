package edu.isi.kcap.wings.opmm;

import java.io.FileNotFoundException;
import java.io.IOException;

import edu.isi.kcap.wings.opmm.DataTypes.Links;
import edu.isi.kcap.wings.opmm.DataTypes.ProvenanceResponseSchema;
import edu.isi.kcap.wings.opmm.Publisher.TriplesPublisher;

/**
 *
 * @author Daniel Garijo
 */
public class Mapper {

    /**
     * Most of these will be reused from the old code, because it works.
     * The mapper initializes the catalog and calls to the template exporter.
     *
     * @param domain
     * @param filePublisher
     * @param abstractFilePath
     * @param exportPrefix:                        Used to generate the URIs of the
     *                                             exported
     *                                             files
     * @param exportUrl:                           ??
     * @param catalogRepository:                   The directory where the catalog
     *                                             will be
     *                                             stored
     * @param componentLibraryFilePath:            The path to the component library
     *                                             file
     * @param planFilePath:                        The path to the Workflow plan
     *                                             file
     * @param endpointQueryURI:                    The URI of the endpoint where the
     *                                             queries will be sent
     * @param endpointPostURI:                     The URI of the endpoint where the
     *                                             triples will be sent
     * @param executionDestinationFilePath:        The path to the execution file
     *                                             that will be generated by the
     *                                             mapper
     * @param expandedTemplateDestinationFilePath: The path to the expanded template
     *                                             file that will be generated by
     *                                             the mapper
     * @param serialization:                       The serialization of the files
     *                                             that will be generated by the
     *                                             mapper
     * @param filePublisher:                       The file publisher that will be
     *                                             used to publish the files
     * @return
     * @throws IOException
     */
    public static ProvenanceResponseSchema main(String domain, String exportPrefix, String exportUrl,
            String catalogRepository,
            String componentLibraryFilePath, String planFilePath, String endpointQueryURI, String endpointPostURI,
            String executionDestinationFilePath, String expandedTemplateDestinationFilePath, String abstractFilePath,
            FilePublisher filePublisher, String serialization)
            throws IOException {
        TriplesPublisher triplesPublisher = new TriplesPublisher(endpointQueryURI, endpointPostURI,
                "http://localhost:3030/ds/data/opmw");
        // Response
        ProvenanceResponseSchema response = new ProvenanceResponseSchema();
        // Create the catalog
        Catalog catalog = new Catalog(domain, exportPrefix,
                catalogRepository, componentLibraryFilePath);

        export(domain, exportPrefix, exportUrl, catalogRepository, planFilePath,
                executionDestinationFilePath, expandedTemplateDestinationFilePath, abstractFilePath, filePublisher,
                serialization, triplesPublisher, response, catalog);
        return response;
    }

    private static void export(String domain, String exportPrefix, String exportUrl,
            String catalogRepository, String planFilePath, String executionDestinationFilePath,
            String expandedTemplateDestinationFilePath, String abstractFilePath, FilePublisher filePublisher,
            String serialization, TriplesPublisher triplesPublisher, ProvenanceResponseSchema response, Catalog catalog)
            throws IOException, FileNotFoundException {
        WorkflowExecutionExport executionExport = new WorkflowExecutionExport(planFilePath, catalog, exportUrl,
                exportPrefix,
                domain,
                filePublisher, triplesPublisher, serialization);

        exportExecution(executionDestinationFilePath, serialization, response, executionExport);
        if (!executionExport.isExecPublished()) {
            exportExpandedTemplate(expandedTemplateDestinationFilePath, serialization, response, executionExport);
            exportAbstractTemplate(abstractFilePath, serialization, response, executionExport);
        }
        exportCatalog(catalogRepository, serialization, response, catalog);
    }

    private static void exportCatalog(String catalogRepository, String serialization, ProvenanceResponseSchema response,
            Catalog catalog) throws IOException {
        // Export the catalog
        String domainPath = catalog.exportCatalog(catalogRepository, serialization);
        Links links = new Links();
        links.setFilePath(domainPath);
        links.setFileUrl(catalog.getDomainGraphURI());
        response.setCatalog(links);
    }

    private static void exportExpandedTemplate(String expandedTemplateDestinationFilePath, String serialization,
            ProvenanceResponseSchema response, WorkflowExecutionExport executionExport) throws IOException {
        String expandedTemplateGraphUri = executionExport.getConcreteTemplateExport().exportAsOPMW(
                expandedTemplateDestinationFilePath,
                serialization);
        Links links = new Links();
        links.setFilePath(expandedTemplateDestinationFilePath);
        links.setFileUrl(expandedTemplateGraphUri);
        response.setWorkflowExpandedTemplate(links);
    }

    private static void exportExecution(String executionDestinationFilePath, String serialization,
            ProvenanceResponseSchema response, WorkflowExecutionExport executionExport)
            throws IOException, FileNotFoundException {
        String executionGraphUri = executionExport.exportAsOPMW(executionDestinationFilePath, serialization);
        Links links = new Links();
        links.setFilePath(executionDestinationFilePath);
        links.setFileUrl(executionGraphUri);
        response.setWorkflowExecution(links);
    }

    private static void exportAbstractTemplate(String abstractFilePath, String serialization,
            ProvenanceResponseSchema response,
            WorkflowExecutionExport executionExport) throws IOException {
        WorkflowTemplateExport abstractTemplateExport = executionExport.getConcreteTemplateExport()
                .getAbstractTemplateExport();
        if (abstractTemplateExport != null) {
            String abstractGraphUri = abstractTemplateExport.exportAsOPMW(abstractFilePath, serialization);
            Links links = new Links();
            links.setFilePath(abstractFilePath);
            links.setFileUrl(abstractGraphUri);
            response.setWorkflowAbstractTemplate(links);
        }
    }

}
